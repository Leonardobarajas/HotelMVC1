//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HotelMVC.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Conexion : DbContext
    {
        public Conexion()
            : base("name=Conexion")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Administrador> Administrador { get; set; }
        public virtual DbSet<CEstados> CEstados { get; set; }
        public virtual DbSet<Clientes> Clientes { get; set; }
        public virtual DbSet<CTipoHabitacion> CTipoHabitacion { get; set; }
        public virtual DbSet<CTipoIdentificacion> CTipoIdentificacion { get; set; }
        public virtual DbSet<DetalleEntrada> DetalleEntrada { get; set; }
        public virtual DbSet<DetalleOrdenPago> DetalleOrdenPago { get; set; }
        public virtual DbSet<Entrada> Entrada { get; set; }
        public virtual DbSet<Habitaciones> Habitaciones { get; set; }
        public virtual DbSet<OrdenPago> OrdenPago { get; set; }
        public virtual DbSet<Productos> Productos { get; set; }
        public virtual DbSet<Proveedores> Proveedores { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<Transacciones> Transacciones { get; set; }
        public virtual DbSet<TransaccionesOrdenPago> TransaccionesOrdenPago { get; set; }
    
        public virtual int CrearCliente(string numeroIdenticacion, string tipoIdentificacion, string nombres, string apellidos, string telefono, string correoElectronico)
        {
            var numeroIdenticacionParameter = numeroIdenticacion != null ?
                new ObjectParameter("NumeroIdenticacion", numeroIdenticacion) :
                new ObjectParameter("NumeroIdenticacion", typeof(string));
    
            var tipoIdentificacionParameter = tipoIdentificacion != null ?
                new ObjectParameter("TipoIdentificacion", tipoIdentificacion) :
                new ObjectParameter("TipoIdentificacion", typeof(string));
    
            var nombresParameter = nombres != null ?
                new ObjectParameter("Nombres", nombres) :
                new ObjectParameter("Nombres", typeof(string));
    
            var apellidosParameter = apellidos != null ?
                new ObjectParameter("Apellidos", apellidos) :
                new ObjectParameter("Apellidos", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(string));
    
            var correoElectronicoParameter = correoElectronico != null ?
                new ObjectParameter("CorreoElectronico", correoElectronico) :
                new ObjectParameter("CorreoElectronico", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CrearCliente", numeroIdenticacionParameter, tipoIdentificacionParameter, nombresParameter, apellidosParameter, telefonoParameter, correoElectronicoParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int SPAdministradorInsert(string idTipoIdentificacion, string numeroIdentificacion, string nombres, string apellidos, string telefono, string correo, string user, string password, Nullable<short> idEstado, string observacion)
        {
            var idTipoIdentificacionParameter = idTipoIdentificacion != null ?
                new ObjectParameter("IdTipoIdentificacion", idTipoIdentificacion) :
                new ObjectParameter("IdTipoIdentificacion", typeof(string));
    
            var numeroIdentificacionParameter = numeroIdentificacion != null ?
                new ObjectParameter("NumeroIdentificacion", numeroIdentificacion) :
                new ObjectParameter("NumeroIdentificacion", typeof(string));
    
            var nombresParameter = nombres != null ?
                new ObjectParameter("Nombres", nombres) :
                new ObjectParameter("Nombres", typeof(string));
    
            var apellidosParameter = apellidos != null ?
                new ObjectParameter("Apellidos", apellidos) :
                new ObjectParameter("Apellidos", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(string));
    
            var correoParameter = correo != null ?
                new ObjectParameter("Correo", correo) :
                new ObjectParameter("Correo", typeof(string));
    
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var idEstadoParameter = idEstado.HasValue ?
                new ObjectParameter("IdEstado", idEstado) :
                new ObjectParameter("IdEstado", typeof(short));
    
            var observacionParameter = observacion != null ?
                new ObjectParameter("Observacion", observacion) :
                new ObjectParameter("Observacion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPAdministradorInsert", idTipoIdentificacionParameter, numeroIdentificacionParameter, nombresParameter, apellidosParameter, telefonoParameter, correoParameter, userParameter, passwordParameter, idEstadoParameter, observacionParameter);
        }
    
        public virtual ObjectResult<SPAdministradorSelect_Result> SPAdministradorSelect()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPAdministradorSelect_Result>("SPAdministradorSelect");
        }
    
        public virtual ObjectResult<SPAdministradorSelectDocumento_Result> SPAdministradorSelectDocumento(string numeroIdentificacion)
        {
            var numeroIdentificacionParameter = numeroIdentificacion != null ?
                new ObjectParameter("NumeroIdentificacion", numeroIdentificacion) :
                new ObjectParameter("NumeroIdentificacion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPAdministradorSelectDocumento_Result>("SPAdministradorSelectDocumento", numeroIdentificacionParameter);
        }
    
        public virtual int SPAdministradorUpdate(Nullable<int> idAdministrador, string telefono, string correo, string user, string password, Nullable<short> idEstado, string observaciones)
        {
            var idAdministradorParameter = idAdministrador.HasValue ?
                new ObjectParameter("IdAdministrador", idAdministrador) :
                new ObjectParameter("IdAdministrador", typeof(int));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(string));
    
            var correoParameter = correo != null ?
                new ObjectParameter("Correo", correo) :
                new ObjectParameter("Correo", typeof(string));
    
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var idEstadoParameter = idEstado.HasValue ?
                new ObjectParameter("IdEstado", idEstado) :
                new ObjectParameter("IdEstado", typeof(short));
    
            var observacionesParameter = observaciones != null ?
                new ObjectParameter("Observaciones", observaciones) :
                new ObjectParameter("Observaciones", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPAdministradorUpdate", idAdministradorParameter, telefonoParameter, correoParameter, userParameter, passwordParameter, idEstadoParameter, observacionesParameter);
        }
    
        public virtual ObjectResult<SPClienteFind_Result> SPClienteFind(string numeroIdentificacion, string nombre, string apellido)
        {
            var numeroIdentificacionParameter = numeroIdentificacion != null ?
                new ObjectParameter("NumeroIdentificacion", numeroIdentificacion) :
                new ObjectParameter("NumeroIdentificacion", typeof(string));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var apellidoParameter = apellido != null ?
                new ObjectParameter("Apellido", apellido) :
                new ObjectParameter("Apellido", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPClienteFind_Result>("SPClienteFind", numeroIdentificacionParameter, nombreParameter, apellidoParameter);
        }
    
        public virtual int SPClienteInsert(string idTipoIdentificacion, string numeroIdentificacion, string nombres, string apellidos, string telefono, string correo, string observaciones)
        {
            var idTipoIdentificacionParameter = idTipoIdentificacion != null ?
                new ObjectParameter("IdTipoIdentificacion", idTipoIdentificacion) :
                new ObjectParameter("IdTipoIdentificacion", typeof(string));
    
            var numeroIdentificacionParameter = numeroIdentificacion != null ?
                new ObjectParameter("NumeroIdentificacion", numeroIdentificacion) :
                new ObjectParameter("NumeroIdentificacion", typeof(string));
    
            var nombresParameter = nombres != null ?
                new ObjectParameter("Nombres", nombres) :
                new ObjectParameter("Nombres", typeof(string));
    
            var apellidosParameter = apellidos != null ?
                new ObjectParameter("Apellidos", apellidos) :
                new ObjectParameter("Apellidos", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(string));
    
            var correoParameter = correo != null ?
                new ObjectParameter("Correo", correo) :
                new ObjectParameter("Correo", typeof(string));
    
            var observacionesParameter = observaciones != null ?
                new ObjectParameter("Observaciones", observaciones) :
                new ObjectParameter("Observaciones", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPClienteInsert", idTipoIdentificacionParameter, numeroIdentificacionParameter, nombresParameter, apellidosParameter, telefonoParameter, correoParameter, observacionesParameter);
        }
    
        public virtual ObjectResult<SPClienteSelect_Result> SPClienteSelect()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPClienteSelect_Result>("SPClienteSelect");
        }
    
        public virtual ObjectResult<SPClienteSelectPorDocumento_Result> SPClienteSelectPorDocumento(string numeroIdentificacion)
        {
            var numeroIdentificacionParameter = numeroIdentificacion != null ?
                new ObjectParameter("NumeroIdentificacion", numeroIdentificacion) :
                new ObjectParameter("NumeroIdentificacion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPClienteSelectPorDocumento_Result>("SPClienteSelectPorDocumento", numeroIdentificacionParameter);
        }
    
        public virtual int SPClienteUpdate(Nullable<int> idCliente, string telefono, string correo, Nullable<short> idEstado, string observaciones)
        {
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(int));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(string));
    
            var correoParameter = correo != null ?
                new ObjectParameter("Correo", correo) :
                new ObjectParameter("Correo", typeof(string));
    
            var idEstadoParameter = idEstado.HasValue ?
                new ObjectParameter("IdEstado", idEstado) :
                new ObjectParameter("IdEstado", typeof(short));
    
            var observacionesParameter = observaciones != null ?
                new ObjectParameter("Observaciones", observaciones) :
                new ObjectParameter("Observaciones", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPClienteUpdate", idClienteParameter, telefonoParameter, correoParameter, idEstadoParameter, observacionesParameter);
        }
    
        public virtual int SPCTipoHabitacionInsert(string descripcion)
        {
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPCTipoHabitacionInsert", descripcionParameter);
        }
    
        public virtual int SPCTipoIdentificacionInsert(string idTipoIdentificacion, string descripcion)
        {
            var idTipoIdentificacionParameter = idTipoIdentificacion != null ?
                new ObjectParameter("IdTipoIdentificacion", idTipoIdentificacion) :
                new ObjectParameter("IdTipoIdentificacion", typeof(string));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPCTipoIdentificacionInsert", idTipoIdentificacionParameter, descripcionParameter);
        }
    
        public virtual int SPDetalleEntradaDeletePorId(Nullable<int> idDetalleEntrada)
        {
            var idDetalleEntradaParameter = idDetalleEntrada.HasValue ?
                new ObjectParameter("IdDetalleEntrada", idDetalleEntrada) :
                new ObjectParameter("IdDetalleEntrada", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPDetalleEntradaDeletePorId", idDetalleEntradaParameter);
        }
    
        public virtual int SPDetalleEntradaInsert(Nullable<int> idEntrada, Nullable<int> idProducto, Nullable<int> cantidad)
        {
            var idEntradaParameter = idEntrada.HasValue ?
                new ObjectParameter("IdEntrada", idEntrada) :
                new ObjectParameter("IdEntrada", typeof(int));
    
            var idProductoParameter = idProducto.HasValue ?
                new ObjectParameter("IdProducto", idProducto) :
                new ObjectParameter("IdProducto", typeof(int));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("Cantidad", cantidad) :
                new ObjectParameter("Cantidad", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPDetalleEntradaInsert", idEntradaParameter, idProductoParameter, cantidadParameter);
        }
    
        public virtual int SPDetalleOrdenPagoDeletePorId(Nullable<int> idDetalleOrdenPago)
        {
            var idDetalleOrdenPagoParameter = idDetalleOrdenPago.HasValue ?
                new ObjectParameter("IdDetalleOrdenPago", idDetalleOrdenPago) :
                new ObjectParameter("IdDetalleOrdenPago", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPDetalleOrdenPagoDeletePorId", idDetalleOrdenPagoParameter);
        }
    
        public virtual int SPDetalleOrdenPagoInsert(Nullable<int> idOrdenPago, Nullable<int> idProducto, Nullable<int> cantidad)
        {
            var idOrdenPagoParameter = idOrdenPago.HasValue ?
                new ObjectParameter("IdOrdenPago", idOrdenPago) :
                new ObjectParameter("IdOrdenPago", typeof(int));
    
            var idProductoParameter = idProducto.HasValue ?
                new ObjectParameter("IdProducto", idProducto) :
                new ObjectParameter("IdProducto", typeof(int));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("Cantidad", cantidad) :
                new ObjectParameter("Cantidad", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPDetalleOrdenPagoInsert", idOrdenPagoParameter, idProductoParameter, cantidadParameter);
        }
    
        public virtual int SPEntradaInsert(Nullable<System.DateTime> fechaHora, string numeroIdentificacion, Nullable<decimal> total, Nullable<short> idEstado)
        {
            var fechaHoraParameter = fechaHora.HasValue ?
                new ObjectParameter("FechaHora", fechaHora) :
                new ObjectParameter("FechaHora", typeof(System.DateTime));
    
            var numeroIdentificacionParameter = numeroIdentificacion != null ?
                new ObjectParameter("NumeroIdentificacion", numeroIdentificacion) :
                new ObjectParameter("NumeroIdentificacion", typeof(string));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("Total", total) :
                new ObjectParameter("Total", typeof(decimal));
    
            var idEstadoParameter = idEstado.HasValue ?
                new ObjectParameter("IdEstado", idEstado) :
                new ObjectParameter("IdEstado", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPEntradaInsert", fechaHoraParameter, numeroIdentificacionParameter, totalParameter, idEstadoParameter);
        }
    
        public virtual ObjectResult<SPEstadosAdministradorSelect_Result> SPEstadosAdministradorSelect()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPEstadosAdministradorSelect_Result>("SPEstadosAdministradorSelect");
        }
    
        public virtual int SPEstadosDeletePorId(Nullable<short> idEstado)
        {
            var idEstadoParameter = idEstado.HasValue ?
                new ObjectParameter("IdEstado", idEstado) :
                new ObjectParameter("IdEstado", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPEstadosDeletePorId", idEstadoParameter);
        }
    
        public virtual ObjectResult<SPEstadosHabitacionSelect_Result> SPEstadosHabitacionSelect()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPEstadosHabitacionSelect_Result>("SPEstadosHabitacionSelect");
        }
    
        public virtual int SPEstadosInsert(string descripcion, string categoria)
        {
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            var categoriaParameter = categoria != null ?
                new ObjectParameter("Categoria", categoria) :
                new ObjectParameter("Categoria", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPEstadosInsert", descripcionParameter, categoriaParameter);
        }
    
        public virtual ObjectResult<SPEstadosSelect_Result> SPEstadosSelect()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPEstadosSelect_Result>("SPEstadosSelect");
        }
    
        public virtual int SPEstadosUpdate(Nullable<int> idEstado, string descripcion, string categoria)
        {
            var idEstadoParameter = idEstado.HasValue ?
                new ObjectParameter("IdEstado", idEstado) :
                new ObjectParameter("IdEstado", typeof(int));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            var categoriaParameter = categoria != null ?
                new ObjectParameter("Categoria", categoria) :
                new ObjectParameter("Categoria", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPEstadosUpdate", idEstadoParameter, descripcionParameter, categoriaParameter);
        }
    
        public virtual int SPHabitacionDeletePorId(Nullable<int> idHabitacion)
        {
            var idHabitacionParameter = idHabitacion.HasValue ?
                new ObjectParameter("IdHabitacion", idHabitacion) :
                new ObjectParameter("IdHabitacion", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPHabitacionDeletePorId", idHabitacionParameter);
        }
    
        public virtual int SPHabitacionesInsert(string numeroHabitacion, Nullable<int> idTipoHabitacion, Nullable<decimal> tarifa, Nullable<int> numeroPersonas, Nullable<short> idEstado, string observaciones)
        {
            var numeroHabitacionParameter = numeroHabitacion != null ?
                new ObjectParameter("NumeroHabitacion", numeroHabitacion) :
                new ObjectParameter("NumeroHabitacion", typeof(string));
    
            var idTipoHabitacionParameter = idTipoHabitacion.HasValue ?
                new ObjectParameter("IdTipoHabitacion", idTipoHabitacion) :
                new ObjectParameter("IdTipoHabitacion", typeof(int));
    
            var tarifaParameter = tarifa.HasValue ?
                new ObjectParameter("Tarifa", tarifa) :
                new ObjectParameter("Tarifa", typeof(decimal));
    
            var numeroPersonasParameter = numeroPersonas.HasValue ?
                new ObjectParameter("NumeroPersonas", numeroPersonas) :
                new ObjectParameter("NumeroPersonas", typeof(int));
    
            var idEstadoParameter = idEstado.HasValue ?
                new ObjectParameter("IdEstado", idEstado) :
                new ObjectParameter("IdEstado", typeof(short));
    
            var observacionesParameter = observaciones != null ?
                new ObjectParameter("Observaciones", observaciones) :
                new ObjectParameter("Observaciones", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPHabitacionesInsert", numeroHabitacionParameter, idTipoHabitacionParameter, tarifaParameter, numeroPersonasParameter, idEstadoParameter, observacionesParameter);
        }
    
        public virtual ObjectResult<SPHabitacionSelect_Result> SPHabitacionSelect()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPHabitacionSelect_Result>("SPHabitacionSelect");
        }
    
        public virtual ObjectResult<SPHabitacionSelectPorHabitacion_Result> SPHabitacionSelectPorHabitacion(string numeroHabitacion)
        {
            var numeroHabitacionParameter = numeroHabitacion != null ?
                new ObjectParameter("NumeroHabitacion", numeroHabitacion) :
                new ObjectParameter("NumeroHabitacion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPHabitacionSelectPorHabitacion_Result>("SPHabitacionSelectPorHabitacion", numeroHabitacionParameter);
        }
    
        public virtual int SPHabitacionUpdate(string numeroHabitacion, Nullable<int> idTipoHabitacion, Nullable<decimal> tarifa, Nullable<int> numeroPersonas, Nullable<short> idEstado, string observaciones)
        {
            var numeroHabitacionParameter = numeroHabitacion != null ?
                new ObjectParameter("NumeroHabitacion", numeroHabitacion) :
                new ObjectParameter("NumeroHabitacion", typeof(string));
    
            var idTipoHabitacionParameter = idTipoHabitacion.HasValue ?
                new ObjectParameter("IdTipoHabitacion", idTipoHabitacion) :
                new ObjectParameter("IdTipoHabitacion", typeof(int));
    
            var tarifaParameter = tarifa.HasValue ?
                new ObjectParameter("Tarifa", tarifa) :
                new ObjectParameter("Tarifa", typeof(decimal));
    
            var numeroPersonasParameter = numeroPersonas.HasValue ?
                new ObjectParameter("NumeroPersonas", numeroPersonas) :
                new ObjectParameter("NumeroPersonas", typeof(int));
    
            var idEstadoParameter = idEstado.HasValue ?
                new ObjectParameter("IdEstado", idEstado) :
                new ObjectParameter("IdEstado", typeof(short));
    
            var observacionesParameter = observaciones != null ?
                new ObjectParameter("Observaciones", observaciones) :
                new ObjectParameter("Observaciones", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPHabitacionUpdate", numeroHabitacionParameter, idTipoHabitacionParameter, tarifaParameter, numeroPersonasParameter, idEstadoParameter, observacionesParameter);
        }
    
        public virtual int SPOrdenPagoInsert(Nullable<System.DateTime> fechaHora, Nullable<decimal> total, Nullable<short> idEstado)
        {
            var fechaHoraParameter = fechaHora.HasValue ?
                new ObjectParameter("FechaHora", fechaHora) :
                new ObjectParameter("FechaHora", typeof(System.DateTime));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("Total", total) :
                new ObjectParameter("Total", typeof(decimal));
    
            var idEstadoParameter = idEstado.HasValue ?
                new ObjectParameter("IdEstado", idEstado) :
                new ObjectParameter("IdEstado", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPOrdenPagoInsert", fechaHoraParameter, totalParameter, idEstadoParameter);
        }
    
        public virtual ObjectResult<SPProductoFind_Result> SPProductoFind(string codigo, string descripcion)
        {
            var codigoParameter = codigo != null ?
                new ObjectParameter("Codigo", codigo) :
                new ObjectParameter("Codigo", typeof(string));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPProductoFind_Result>("SPProductoFind", codigoParameter, descripcionParameter);
        }
    
        public virtual ObjectResult<SPProductoSelectPorCodigo_Result> SPProductoSelectPorCodigo(string codigo)
        {
            var codigoParameter = codigo != null ?
                new ObjectParameter("Codigo", codigo) :
                new ObjectParameter("Codigo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPProductoSelectPorCodigo_Result>("SPProductoSelectPorCodigo", codigoParameter);
        }
    
        public virtual ObjectResult<SPProductosSelect_Result> SPProductosSelect()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPProductosSelect_Result>("SPProductosSelect");
        }
    
        public virtual int SPProductosUpdate(Nullable<int> idProducto, string numeroIdentificacion, string descripcion, string codigo, Nullable<decimal> precio, Nullable<decimal> costo, Nullable<int> existencia, Nullable<short> idEstado, string observaciones)
        {
            var idProductoParameter = idProducto.HasValue ?
                new ObjectParameter("IdProducto", idProducto) :
                new ObjectParameter("IdProducto", typeof(int));
    
            var numeroIdentificacionParameter = numeroIdentificacion != null ?
                new ObjectParameter("NumeroIdentificacion", numeroIdentificacion) :
                new ObjectParameter("NumeroIdentificacion", typeof(string));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            var codigoParameter = codigo != null ?
                new ObjectParameter("Codigo", codigo) :
                new ObjectParameter("Codigo", typeof(string));
    
            var precioParameter = precio.HasValue ?
                new ObjectParameter("Precio", precio) :
                new ObjectParameter("Precio", typeof(decimal));
    
            var costoParameter = costo.HasValue ?
                new ObjectParameter("Costo", costo) :
                new ObjectParameter("Costo", typeof(decimal));
    
            var existenciaParameter = existencia.HasValue ?
                new ObjectParameter("Existencia", existencia) :
                new ObjectParameter("Existencia", typeof(int));
    
            var idEstadoParameter = idEstado.HasValue ?
                new ObjectParameter("IdEstado", idEstado) :
                new ObjectParameter("IdEstado", typeof(short));
    
            var observacionesParameter = observaciones != null ?
                new ObjectParameter("Observaciones", observaciones) :
                new ObjectParameter("Observaciones", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPProductosUpdate", idProductoParameter, numeroIdentificacionParameter, descripcionParameter, codigoParameter, precioParameter, costoParameter, existenciaParameter, idEstadoParameter, observacionesParameter);
        }
    
        public virtual int SPProveedoresDeletePorId(Nullable<int> idProveedor)
        {
            var idProveedorParameter = idProveedor.HasValue ?
                new ObjectParameter("IdProveedor", idProveedor) :
                new ObjectParameter("IdProveedor", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPProveedoresDeletePorId", idProveedorParameter);
        }
    
        public virtual ObjectResult<SPProveedoresFind_Result> SPProveedoresFind(string razonSocial, string numeroIdentificacion)
        {
            var razonSocialParameter = razonSocial != null ?
                new ObjectParameter("RazonSocial", razonSocial) :
                new ObjectParameter("RazonSocial", typeof(string));
    
            var numeroIdentificacionParameter = numeroIdentificacion != null ?
                new ObjectParameter("NumeroIdentificacion", numeroIdentificacion) :
                new ObjectParameter("NumeroIdentificacion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPProveedoresFind_Result>("SPProveedoresFind", razonSocialParameter, numeroIdentificacionParameter);
        }
    
        public virtual int SPProveedoresInsert(string razonSocial, string idTipoIdentificacion, string numeroIdentificacion, string direccion, string telefono, string correo, Nullable<short> idEstado, string observaciones)
        {
            var razonSocialParameter = razonSocial != null ?
                new ObjectParameter("RazonSocial", razonSocial) :
                new ObjectParameter("RazonSocial", typeof(string));
    
            var idTipoIdentificacionParameter = idTipoIdentificacion != null ?
                new ObjectParameter("IdTipoIdentificacion", idTipoIdentificacion) :
                new ObjectParameter("IdTipoIdentificacion", typeof(string));
    
            var numeroIdentificacionParameter = numeroIdentificacion != null ?
                new ObjectParameter("NumeroIdentificacion", numeroIdentificacion) :
                new ObjectParameter("NumeroIdentificacion", typeof(string));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("Direccion", direccion) :
                new ObjectParameter("Direccion", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(string));
    
            var correoParameter = correo != null ?
                new ObjectParameter("Correo", correo) :
                new ObjectParameter("Correo", typeof(string));
    
            var idEstadoParameter = idEstado.HasValue ?
                new ObjectParameter("IdEstado", idEstado) :
                new ObjectParameter("IdEstado", typeof(short));
    
            var observacionesParameter = observaciones != null ?
                new ObjectParameter("Observaciones", observaciones) :
                new ObjectParameter("Observaciones", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPProveedoresInsert", razonSocialParameter, idTipoIdentificacionParameter, numeroIdentificacionParameter, direccionParameter, telefonoParameter, correoParameter, idEstadoParameter, observacionesParameter);
        }
    
        public virtual ObjectResult<SPProveedoresSelect_Result> SPProveedoresSelect()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPProveedoresSelect_Result>("SPProveedoresSelect");
        }
    
        public virtual ObjectResult<SPProveedoresSelectPorDocumento_Result> SPProveedoresSelectPorDocumento(string numeroIdentificacion)
        {
            var numeroIdentificacionParameter = numeroIdentificacion != null ?
                new ObjectParameter("NumeroIdentificacion", numeroIdentificacion) :
                new ObjectParameter("NumeroIdentificacion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPProveedoresSelectPorDocumento_Result>("SPProveedoresSelectPorDocumento", numeroIdentificacionParameter);
        }
    
        public virtual int SPProveedoresUpdate(Nullable<int> idProveedor, string direccion, string telefono, string correo, Nullable<short> idEstado, string observaciones)
        {
            var idProveedorParameter = idProveedor.HasValue ?
                new ObjectParameter("IdProveedor", idProveedor) :
                new ObjectParameter("IdProveedor", typeof(int));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("Direccion", direccion) :
                new ObjectParameter("Direccion", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(string));
    
            var correoParameter = correo != null ?
                new ObjectParameter("Correo", correo) :
                new ObjectParameter("Correo", typeof(string));
    
            var idEstadoParameter = idEstado.HasValue ?
                new ObjectParameter("IdEstado", idEstado) :
                new ObjectParameter("IdEstado", typeof(short));
    
            var observacionesParameter = observaciones != null ?
                new ObjectParameter("Observaciones", observaciones) :
                new ObjectParameter("Observaciones", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPProveedoresUpdate", idProveedorParameter, direccionParameter, telefonoParameter, correoParameter, idEstadoParameter, observacionesParameter);
        }
    
        public virtual int SPTipoHabitacionDeletePorId(Nullable<int> idTipoHabitacion)
        {
            var idTipoHabitacionParameter = idTipoHabitacion.HasValue ?
                new ObjectParameter("IdTipoHabitacion", idTipoHabitacion) :
                new ObjectParameter("IdTipoHabitacion", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPTipoHabitacionDeletePorId", idTipoHabitacionParameter);
        }
    
        public virtual ObjectResult<SPTipoHabitacionSelect_Result> SPTipoHabitacionSelect()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPTipoHabitacionSelect_Result>("SPTipoHabitacionSelect");
        }
    
        public virtual int SPTipoIdentificacionDeletePorId(Nullable<int> idTipoIdentificacion)
        {
            var idTipoIdentificacionParameter = idTipoIdentificacion.HasValue ?
                new ObjectParameter("IdTipoIdentificacion", idTipoIdentificacion) :
                new ObjectParameter("IdTipoIdentificacion", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPTipoIdentificacionDeletePorId", idTipoIdentificacionParameter);
        }
    
        public virtual ObjectResult<SPTipoIdentificacionSelect_Result> SPTipoIdentificacionSelect()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPTipoIdentificacionSelect_Result>("SPTipoIdentificacionSelect");
        }
    
        public virtual int SPTransaccionesInsert(string numeroIdentificacion, string numeroHabitacion, Nullable<System.DateTime> fechaHoraIngreso, Nullable<System.DateTime> fechaHoraSalida, Nullable<int> totalDias, Nullable<int> numeroPersonas, Nullable<short> idEstado, Nullable<decimal> total)
        {
            var numeroIdentificacionParameter = numeroIdentificacion != null ?
                new ObjectParameter("NumeroIdentificacion", numeroIdentificacion) :
                new ObjectParameter("NumeroIdentificacion", typeof(string));
    
            var numeroHabitacionParameter = numeroHabitacion != null ?
                new ObjectParameter("NumeroHabitacion", numeroHabitacion) :
                new ObjectParameter("NumeroHabitacion", typeof(string));
    
            var fechaHoraIngresoParameter = fechaHoraIngreso.HasValue ?
                new ObjectParameter("FechaHoraIngreso", fechaHoraIngreso) :
                new ObjectParameter("FechaHoraIngreso", typeof(System.DateTime));
    
            var fechaHoraSalidaParameter = fechaHoraSalida.HasValue ?
                new ObjectParameter("FechaHoraSalida", fechaHoraSalida) :
                new ObjectParameter("FechaHoraSalida", typeof(System.DateTime));
    
            var totalDiasParameter = totalDias.HasValue ?
                new ObjectParameter("TotalDias", totalDias) :
                new ObjectParameter("TotalDias", typeof(int));
    
            var numeroPersonasParameter = numeroPersonas.HasValue ?
                new ObjectParameter("NumeroPersonas", numeroPersonas) :
                new ObjectParameter("NumeroPersonas", typeof(int));
    
            var idEstadoParameter = idEstado.HasValue ?
                new ObjectParameter("IdEstado", idEstado) :
                new ObjectParameter("IdEstado", typeof(short));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("Total", total) :
                new ObjectParameter("Total", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPTransaccionesInsert", numeroIdentificacionParameter, numeroHabitacionParameter, fechaHoraIngresoParameter, fechaHoraSalidaParameter, totalDiasParameter, numeroPersonasParameter, idEstadoParameter, totalParameter);
        }
    
        public virtual int SPTransaccionesOrdePagoInsert(Nullable<int> idOrdenPago, Nullable<long> idTransaccion)
        {
            var idOrdenPagoParameter = idOrdenPago.HasValue ?
                new ObjectParameter("IdOrdenPago", idOrdenPago) :
                new ObjectParameter("IdOrdenPago", typeof(int));
    
            var idTransaccionParameter = idTransaccion.HasValue ?
                new ObjectParameter("IdTransaccion", idTransaccion) :
                new ObjectParameter("IdTransaccion", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPTransaccionesOrdePagoInsert", idOrdenPagoParameter, idTransaccionParameter);
        }
    
        public virtual int ValidarLogin(string user, string pass)
        {
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            var passParameter = pass != null ?
                new ObjectParameter("Pass", pass) :
                new ObjectParameter("Pass", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ValidarLogin", userParameter, passParameter);
        }
    }
}
